# Auto-Build ffmpeg from source

# Prerequist:
# 1. basic compiler
#  1) RedHat/CentOS:
#     yum -y groupinstall "Development Tools"
#     yum -y install gcc-c++ rpm-build rpmdevtools binutils-devel autoconf automake libtool autogen intltool bison flex gdb make cvs subversion git mercurial patch gawk
#  2) Debian/Ubuntu
#     sudo apt-get install -y build-essential g++ autoconf automake libtool autogen intltool bison flex gdb make cvs subversion subversion-tools git mercurial patch gawk

######################################################################
# define the directory stores all of the source code packages
DN_SRC=$(PWD)/../sources
DN_TOP=$(PWD)
DN_PATCH=$(PWD)/../sources
PREFIX=$(PWD)/target
STRLOGO=furnaceyhfudev

# GPU related:
USE_GPU=0

OPENCV_GPU_SUPPORT_CMAKE=
OPENCV_GPU_SUPPORT_DEPEND=
MEDIAMETRICS_GPU_SUPPORT_CONF=

ifeq ($(USE_GPU),1)
OPENCV_GPU_SUPPORT_CMAKE= -D WITH_CUDA=ON \
                          -D CUDA_TOOLKIT_ROOT_DIR=$(PREFIX)/opt/$(CUDASDK) \
                          -D CUDA_GENERATION=Auto \
                          -D CUDA_ARCH_BIN=1.1 -D CUDA_ARCH_PTX=1.1 \
                          -D WITH_CUBLAS=ON \
                          -D WITH_NVCUVID=ON \
                          -D CUDA_FAST_MATH=ON \
                          $(NULL)
OPENCV_GPU_SUPPORT_DEPEND= $(CUDASDK)-install
MEDIAMETRICS_GPU_SUPPORT_CONF=--with-cuda=$(PREFIX)/opt/$(CUDASDK)
endif

######################################################################
all: get-sources ffmpeg gpac mediametrics

######################################################################
include Makefile.common


########################################
GRAPHITE2=graphite2
GRAPHITE2_VERSION=1.2.4
GRAPHITE2_SRC=$(GRAPHITE2)-$(GRAPHITE2_VERSION).tgz
GRAPHITE2_URL=http://sourceforge.net/projects/silgraphite/files/graphite2/$(GRAPHITE2_SRC)

FL_DEP_GRAPHITE2= \
	$(CMAKE)-install \
	$(NULL)

$(DN_SRC)/$(GRAPHITE2_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(GRAPHITE2_URL)
	touch $@
$(GRAPHITE2)-$(GRAPHITE2_VERSION)/Graphite.cmake: $(DN_SRC)/$(GRAPHITE2_SRC)
	tar -xf $(DN_SRC)/$(GRAPHITE2_SRC)
	touch $@
$(GRAPHITE2)-$(GRAPHITE2_VERSION)/build/Makefile: $(GRAPHITE2)-$(GRAPHITE2_VERSION)/Graphite.cmake $(FL_DEP_GRAPHITE2)
	cd $(GRAPHITE2)-$(GRAPHITE2_VERSION)/ && mkdir -p build && cd build \
		&& $(ENV_COMPILE) cmake $(CMAKE_ARCH_FLAGS) -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(PREFIX) ..
$(GRAPHITE2)-$(GRAPHITE2_VERSION)/build/src/libgraphite2.la: $(GRAPHITE2)-$(GRAPHITE2_VERSION)/build/Makefile
	cd $(GRAPHITE2)-$(GRAPHITE2_VERSION)/build && make $(MAKE_ARG)
$(PREFIX)/lib/libgraphite2.la: $(GRAPHITE2)-$(GRAPHITE2_VERSION)/build/src/libgraphite2.la
	cd $(GRAPHITE2)-$(GRAPHITE2_VERSION)/build && make install

$(GRAPHITE2)-uninstall: $(GRAPHITE2)-$(GRAPHITE2_VERSION)/build/src/libgraphite2.la
	cd $(GRAPHITE2)-$(GRAPHITE2_VERSION)/build && make uninstall
$(GRAPHITE2)-install: $(PREFIX)/lib/libgraphite2.la
	touch $@

FL_SOURCES+=$(DN_SRC)/$(GRAPHITE2_SRC)
#FL_DEPENDENCES_FFMPEG+=$(GRAPHITE2)-install
FL_UNINSTALL+=$(GRAPHITE2)-uninstall

########################################
HARFBUZZ=harfbuzz
HARFBUZZ_VERSION=0.9.9
HARFBUZZ_VERSION=0.9.40
HARFBUZZ_SRC=$(HARFBUZZ)-$(HARFBUZZ_VERSION).tar.bz2
HARFBUZZ_URL=http://www.freedesktop.org/software/harfbuzz/release/$(HARFBUZZ_SRC)

FL_DEP_HARFBUZZ= \
	$(LIBXML2)-install \
	$(GRAPHITE2)-install \
	$(NULL)

$(DN_SRC)/$(HARFBUZZ_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(HARFBUZZ_URL)
	cd $(HARFBUZZ)-$(HARFBUZZ_VERSION) &&

$(DN_SRC)/$(HARFBUZZ_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(HARFBUZZ_URL)
	touch $@
$(HARFBUZZ)-$(HARFBUZZ_VERSION)/configure: $(DN_SRC)/$(HARFBUZZ_SRC)
	tar -xf $(DN_SRC)/$(HARFBUZZ_SRC)
	touch $@
$(HARFBUZZ)-$(HARFBUZZ_VERSION)/Makefile: $(HARFBUZZ)-$(HARFBUZZ_VERSION)/configure $(FL_DEP_HARFBUZZ)
	cd $(HARFBUZZ)-$(HARFBUZZ_VERSION)/ && $(ENV_COMPILE) ./configure --prefix=$(PREFIX) --enable-static --enable-shared --with-gobject=no --with-graphite2
$(HARFBUZZ)-$(HARFBUZZ_VERSION)/src/libharfbuzz.la: $(HARFBUZZ)-$(HARFBUZZ_VERSION)/Makefile
	cd $(HARFBUZZ)-$(HARFBUZZ_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libharfbuzz.a: $(HARFBUZZ)-$(HARFBUZZ_VERSION)/src/libharfbuzz.la
	cd $(HARFBUZZ)-$(HARFBUZZ_VERSION)/ && make install

$(HARFBUZZ)-uninstall: $(HARFBUZZ)-$(HARFBUZZ_VERSION)/src/libharfbuzz.la
	cd $(HARFBUZZ)-$(HARFBUZZ_VERSION)/ && make uninstall
$(HARFBUZZ)-install: $(PREFIX)/lib/libharfbuzz.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(HARFBUZZ_SRC)
#FL_DEPENDENCES_FFMPEG+=$(HARFBUZZ)-install
FL_UNINSTALL+=$(HARFBUZZ)-uninstall

########################################
# http://fribidi.org/download/fribidi-0.19.6.tar.bz2
FRIBIDI=fribidi

# automake 14:
FRIBIDI_VERSION=0.19.6
FRIBIDI_SRC=$(FRIBIDI)-$(FRIBIDI_VERSION).tar.bz2
# automake 13:
#FRIBIDI_VERSION=0.19.2
#FRIBIDI_SRC=$(FRIBIDI)-$(FRIBIDI_VERSION).tar.gz

FRIBIDI_URL=http://fribidi.org/download/$(FRIBIDI_SRC)

$(DN_SRC)/$(FRIBIDI_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(FRIBIDI_URL)
	touch $@
$(FRIBIDI)-$(FRIBIDI_VERSION)/configure: $(DN_SRC)/$(FRIBIDI_SRC)
	tar -xf $(DN_SRC)/$(FRIBIDI_SRC)
	touch $@
$(FRIBIDI)-$(FRIBIDI_VERSION)/Makefile: $(FRIBIDI)-$(FRIBIDI_VERSION)/configure
	cd $(FRIBIDI)-$(FRIBIDI_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-static --enable-shared --with-glib=no
$(FRIBIDI)-$(FRIBIDI_VERSION)/lib/libfribidi.la: $(FRIBIDI)-$(FRIBIDI_VERSION)/Makefile
	cd $(FRIBIDI)-$(FRIBIDI_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libfribidi.a: $(FRIBIDI)-$(FRIBIDI_VERSION)/lib/libfribidi.la
	cd $(FRIBIDI)-$(FRIBIDI_VERSION)/ && make install

$(FRIBIDI)-uninstall: $(FRIBIDI)-$(FRIBIDI_VERSION)/lib/libfribidi.la
	cd $(FRIBIDI)-$(FRIBIDI_VERSION)/ && make uninstall
$(FRIBIDI)-install: $(PREFIX)/lib/libfribidi.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(FRIBIDI_SRC)
#FL_DEPENDENCES_FFMPEG+=$(FRIBIDI)-install
FL_UNINSTALL+=$(FRIBIDI)-uninstall

########################################
LIBENCA=enca
LIBENCA_VERSION=1.15
LIBENCA_VERSION=1.16
LIBENCA_SRC=$(LIBENCA)-$(LIBENCA_VERSION).tar.gz
LIBENCA_URL=http://dl.cihar.com/enca/$(LIBENCA_SRC)

$(DN_SRC)/$(LIBENCA_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(LIBENCA_URL)
	touch $@
$(LIBENCA)-$(LIBENCA_VERSION)/configure: $(DN_SRC)/$(LIBENCA_SRC)
	tar -xf $(DN_SRC)/$(LIBENCA_SRC)
	touch $@
$(LIBENCA)-$(LIBENCA_VERSION)/Makefile: $(LIBENCA)-$(LIBENCA_VERSION)/configure
	cd $(LIBENCA)-$(LIBENCA_VERSION)/ && ./configure --prefix=$(PREFIX) --exec-prefix=$(PREFIX) --oldincludedir=$(PREFIX)/include --datadir=$(PREFIX)/usr --enable-static --enable-shared --disable-harfbuzz
$(LIBENCA)-$(LIBENCA_VERSION)/src/enca: $(LIBENCA)-$(LIBENCA_VERSION)/Makefile
	cd $(LIBENCA)-$(LIBENCA_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libenca.a: $(LIBENCA)-$(LIBENCA_VERSION)/Makefile $(LIBENCA)-$(LIBENCA_VERSION)/src/enca $(LIBENCA)-uninstall
	cd $(LIBENCA)-$(LIBENCA_VERSION)/ && make install

$(LIBENCA)-uninstall: $(LIBENCA)-$(LIBENCA_VERSION)/src/enca
	cd $(LIBENCA)-$(LIBENCA_VERSION)/ && make uninstall
$(LIBENCA)-install: $(PREFIX)/lib/libenca.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(LIBENCA_SRC)
#FL_DEPENDENCES_FFMPEG+=$(LIBENCA)-install
FL_UNINSTALL+=$(LIBENCA)-uninstall

########################################
# --disable-harfbuzz since we don't need harfbuzz to function
LIBASS=libass
LIBASS_VERSION=0.10.2
LIBASS_VERSION=0.12.2
LIBASS_SRC=$(LIBASS)-$(LIBASS_VERSION).tar.gz
#LIBASS_URL=https://libass.googlecode.com/files/$(LIBASS_SRC)
LIBASS_URL=https://github.com/libass/libass/archive/$(LIBASS_VERSION).tar.gz
#LIBASS_URL=https://github.com/libass/libass/releases/download/$(LIBASS_VERSION)/$(LIBASS_SRC)

#$(PREFIX)/lib/libharfbuzz.a
FL_DEP_LIBASS= \
	$(FREETYPE)-install \
	$(FRIBIDI)-install \
	$(LIBENCA)-install \
	$(YASM)-install \
	$(NULL)

# use release file:
$(DN_SRC)/$(LIBASS_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(LIBASS_URL) -O $(LIBASS_SRC)
	touch $@
$(LIBASS)-$(LIBASS_VERSION)/README: $(DN_SRC)/$(LIBASS_SRC)
	tar -xf $(DN_SRC)/$(LIBASS_SRC)
	touch $@

# use git instead
LIBASS_VERSION=git
LIBASS_SRC=$(LIBASS)-$(LIBASS_VERSION)/.git
LIBASS_URL=https://github.com/libass/libass.git

$(DN_SRC)/$(LIBASS_SRC): $(DN_SRC)/created
	if [ -d "$(DN_SRC)/$(LIBASS_SRC)" ]; then cd $(DN_SRC)/$(LIBASS)-$(LIBASS_VERSION) && git pull; else git clone $(LIBASS_URL) $(DN_SRC)/$(LIBASS)-$(LIBASS_VERSION); fi
	touch $@

$(LIBASS)-$(LIBASS_VERSION)/.git: $(DN_SRC)/$(LIBASS_SRC)
	cd $(DN_SRC)/$(LIBASS)-$(LIBASS_VERSION) && git pull
	if [ -d "$(LIBASS)-$(LIBASS_VERSION)" ]; then cd $(LIBASS)-$(LIBASS_VERSION) && git pull; else git clone $(DN_SRC)/$(LIBASS)-$(LIBASS_VERSION)/ $(LIBASS)-$(LIBASS_VERSION); fi
	touch $@

$(LIBASS)-$(LIBASS_VERSION)/configure.ac: $(LIBASS)-$(LIBASS_VERSION)/.git $(FL_DEP_LIBASS)
	cd $(LIBASS)-$(LIBASS_VERSION)/ && git pull

$(LIBASS)-$(LIBASS_VERSION)/configure: $(LIBASS)-$(LIBASS_VERSION)/configure.ac
	cd $(LIBASS)-$(LIBASS_VERSION) && ./autogen.sh
$(LIBASS)-$(LIBASS_VERSION)/Makefile: $(LIBASS)-$(LIBASS_VERSION)/configure
	cd $(LIBASS)-$(LIBASS_VERSION) && FRIBIDI_CFLAGS="-I$(PREFIX)/include/fribidi" FRIBIDI_LIBS="-L$(PREFIX)/usr/lib" $(ENV_COMPILE) ./configure --prefix=$(PREFIX) --exec-prefix=$(PREFIX) --oldincludedir=$(PREFIX)/include --datadir=$(PREFIX)/usr --enable-static --enable-shared --disable-harfbuzz
	touch $@

$(LIBASS)-$(LIBASS_VERSION)/libass/libass.la: $(LIBASS)-$(LIBASS_VERSION)/Makefile
	cd $(LIBASS)-$(LIBASS_VERSION)/ && $(ENV_COMPILE) make $(MAKE_ARG)
$(PREFIX)/lib/libass.a: $(LIBASS)-$(LIBASS_VERSION)/libass/libass.la
	cd $(LIBASS)-$(LIBASS_VERSION)/ && make install

$(LIBASS)-uninstall: $(LIBASS)-$(LIBASS_VERSION)/libass/libass.la
	cd $(LIBASS)-$(LIBASS_VERSION)/ && make uninstall
$(LIBASS)-install: $(PREFIX)/lib/libass.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(LIBASS_SRC)
FL_UNINSTALL+=$(LIBASS)-uninstall

########################################
#http://git.xiph.org/speex.git
LIBSPEEX=speex
LIBSPEEX_VERSION=1.2rc1
LIBSPEEX_VERSION=1.2rc2
LIBSPEEX_SRC=$(LIBSPEEX)-$(LIBSPEEX_VERSION).tar.gz
LIBSPEEX_URL=http://downloads.xiph.org/releases/speex/$(LIBSPEEX_SRC)

$(DN_SRC)/$(LIBSPEEX_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(LIBSPEEX_URL)
	touch $@
$(LIBSPEEX)-$(LIBSPEEX_VERSION)/configure: $(DN_SRC)/$(LIBSPEEX_SRC)
	tar -xf $(DN_SRC)/$(LIBSPEEX_SRC)
	touch $@
$(LIBSPEEX)-$(LIBSPEEX_VERSION)/Makefile: $(LIBSPEEX)-$(LIBSPEEX_VERSION)/configure
	cd $(LIBSPEEX)-$(LIBSPEEX_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(LIBSPEEX)-$(LIBSPEEX_VERSION)/libspeex/libspeex.la: $(LIBSPEEX)-$(LIBSPEEX_VERSION)/Makefile
	cd $(LIBSPEEX)-$(LIBSPEEX_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libspeex.a: $(LIBSPEEX)-$(LIBSPEEX_VERSION)/libspeex/libspeex.la
	cd $(LIBSPEEX)-$(LIBSPEEX_VERSION)/ && make install

$(LIBSPEEX)-uninstall: $(LIBSPEEX)-$(LIBSPEEX_VERSION)/libspeex/libspeex.la
	cd $(LIBSPEEX)-$(LIBSPEEX_VERSION)/ && make uninstall
$(LIBSPEEX)-install: $(PREFIX)/lib/libspeex.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(LIBSPEEX_SRC)
FL_UNINSTALL+=$(LIBSPEEX)-uninstall

########################################
OPUS=opus
OPUS_VERSION=1.1
OPUS_VERSION=1.1.1-beta
OPUS_SRC=$(OPUS)-$(OPUS_VERSION).tar.gz
OPUS_URL=http://downloads.xiph.org/releases/opus/$(OPUS_SRC)

$(DN_SRC)/$(OPUS_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(OPUS_URL)
	touch $@
$(OPUS)-$(OPUS_VERSION)/configure: $(DN_SRC)/$(OPUS_SRC)
	tar -xf $(DN_SRC)/$(OPUS_SRC)
	touch $@
$(OPUS)-$(OPUS_VERSION)/Makefile: $(OPUS)-$(OPUS_VERSION)/configure
	cd $(OPUS)-$(OPUS_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(OPUS)-$(OPUS_VERSION)/opus.pc: $(OPUS)-$(OPUS_VERSION)/Makefile
	cd $(OPUS)-$(OPUS_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/pkgconfig/opus.pc: $(OPUS)-$(OPUS_VERSION)/opus.pc
	cd $(OPUS)-$(OPUS_VERSION)/ && make install

$(OPUS)-uninstall: $(OPUS)-$(OPUS_VERSION)/opus.pc
	cd $(OPUS)-$(OPUS_VERSION)/ && make uninstall
$(OPUS)-install: $(PREFIX)/lib/pkgconfig/opus.pc
	touch $@

FL_SOURCES+=$(DN_SRC)/$(OPUS_SRC)
FL_UNINSTALL+=$(OPUS)-uninstall

########################################
LIBGSM=libgsm
LIBGSM_VERSION=1.0.13
LIBGSM_SRC=$(LIBGSM)_$(LIBGSM_VERSION).orig.tar.gz
LIBGSM_URL=http://ftp.debian.org/debian/pool/main/libg/libgsm/$(LIBGSM_SRC)

$(DN_SRC)/$(LIBGSM_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(LIBGSM_URL)
	touch $@
$(LIBGSM)-$(LIBGSM_VERSION)/Makefile: $(DN_SRC)/$(LIBGSM_SRC)
	rm -rf gsm-*
	tar -xf $(DN_SRC)/$(LIBGSM_SRC)
	mv gsm-* $(LIBGSM)-$(LIBGSM_VERSION)
	touch $@
$(LIBGSM)-$(LIBGSM_VERSION)/lib/libgsm.a: $(LIBGSM)-$(LIBGSM_VERSION)/Makefile
	cd $(LIBGSM)-$(LIBGSM_VERSION)/ && make $(MAKE_ARG) CC="gcc -fPIC"
	touch $@
$(PREFIX)/lib/libgsm.a: $(LIBGSM)-$(LIBGSM_VERSION)/lib/libgsm.a
	cd $(LIBGSM)-$(LIBGSM_VERSION)/ && install -m 644 inc/gsm.h $(PREFIX)/include && install -m 644 lib/libgsm.a $(PREFIX)/lib

$(LIBGSM)-uninstall: $(LIBGSM)-$(LIBGSM_VERSION)/lib/libgsm.a
	rm -f $(PREFIX)/include/gsm.h $(PREFIX)/lib/libgsm.a
$(LIBGSM)-install: $(PREFIX)/lib/libgsm.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(LIBGSM_SRC)
FL_UNINSTALL+=$(LIBGSM)-uninstall

########################################
# no --enable-liba52 in ffmpeg anymore
LIBA52=a52dec
LIBA52_VERSION=0.7.4
LIBA52_SRC=$(LIBA52)-$(LIBA52_VERSION).tar.gz
LIBA52_URL=http://liba52.sourceforge.net/files/$(LIBA52_SRC)

$(DN_SRC)/$(LIBA52_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(LIBA52_URL)
	touch $@
$(LIBA52)-$(LIBA52_VERSION)/configure: $(DN_SRC)/$(LIBA52_SRC)
	tar -xf $(DN_SRC)/$(LIBA52_SRC)
	touch $@
$(LIBA52)-$(LIBA52_VERSION)/Makefile: $(LIBA52)-$(LIBA52_VERSION)/configure
	cd $(LIBA52)-$(LIBA52_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(LIBA52)-$(LIBA52_VERSION)/liba52/liba52.la: $(LIBA52)-$(LIBA52_VERSION)/Makefile
	cd $(LIBA52)-$(LIBA52_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/liba52.a: $(LIBA52)-$(LIBA52_VERSION)/liba52/liba52.la
	cd $(LIBA52)-$(LIBA52_VERSION)/ && make install

$(LIBA52)-uninstall: $(LIBA52)-$(LIBA52_VERSION)/liba52/liba52.la
	cd $(LIBA52)-$(LIBA52_VERSION)/ && make uninstall
$(LIBA52)-install: $(PREFIX)/lib/liba52.a
	touch $@

FL_SOURCES_OTHERS+=$(DN_SRC)/$(LIBA52_SRC)
FL_UNINSTALL_OTHERS+=$(LIBA52)-uninstall

########################################
FAAD=faad2
FAAD_VERSION=2.7
FAAD_SRC=$(FAAD)-$(FAAD_VERSION).tar.bz2
FAAD_URL=http://sourceforge.net/projects/faac/files/$(FAAD)-src/$(FAAD)-$(FAAD_VERSION)/$(FAAD_SRC)

$(DN_SRC)/$(FAAD_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(FAAD_URL)
	touch $@
$(FAAD)-$(FAAD_VERSION)/configure: $(DN_SRC)/$(FAAD_SRC)
	tar -xf $(DN_SRC)/$(FAAD_SRC)
	touch $@
$(FAAD)-$(FAAD_VERSION)/Makefile: $(FAAD)-$(FAAD_VERSION)/configure
	cd $(FAAD)-$(FAAD_VERSION)/ && sh ./bootstrap && ./configure --prefix=$(PREFIX) --enable-shared
$(FAAD)-$(FAAD_VERSION)/libfaad/libfaad.la: $(FAAD)-$(FAAD_VERSION)/Makefile
	cd $(FAAD)-$(FAAD_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libfaad.a: $(FAAD)-$(FAAD_VERSION)/libfaad/libfaad.la
	cd $(FAAD)-$(FAAD_VERSION)/ && make install

$(FAAD)-uninstall: $(FAAD)-$(FAAD_VERSION)/libfaad/libfaad.la
	cd $(FAAD)-$(FAAD_VERSION)/ && make uninstall
$(FAAD)-install: $(PREFIX)/lib/libfaad.a
	touch $@

FL_SOURCES_OTHERS+=$(DN_SRC)/$(FAAD_SRC)
FL_UNINSTALL_OTHERS+=$(FAAD)-uninstall

########################################
# libfaac is not updated for three years+
# best open-source audio library is the fdk_acc library which is part of the Android project
FAAC=faac
FAAC_VERSION=1.28
FAAC_SRC=$(FAAC)-$(FAAC_VERSION).tar.bz2
FAAC_URL=http://sourceforge.net/projects/faac/files/faac-src/faac-$(FAAC_VERSION)/$(FAAC_SRC)

$(DN_SRC)/$(FAAC_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(FAAC_URL)
	touch $@
$(FAAC)-$(FAAC_VERSION)/README: $(DN_SRC)/$(FAAC_SRC)
	tar -xf $(DN_SRC)/$(FAAC_SRC)
	touch $@
#$(FAAC)-$(FAAC_VERSION)/mypatched: $(DN_PATCH)/pbs-faac-1.28-1.patch $(FAAC)-$(FAAC_VERSION)/README
$(FAAC)-$(FAAC_VERSION)/mypatched: $(DN_PATCH)/pbs-faac-1.28-1.patch $(DN_SRC)/$(FAAC_SRC)
	rm -rf $(FAAC)-$(FAAC_VERSION)/
	tar -xf $(DN_SRC)/$(FAAC_SRC)
#	cd $(FAAC)-$(FAAC_VERSION)/ && patch -s -t -R -p1 < $(DN_PATCH)/pbs-faac-1.28-1.patch && patch -p1 < $(DN_PATCH)/pbs-faac-1.28-1.patch
	cd $(FAAC)-$(FAAC_VERSION)/ && patch -p1 < $(DN_PATCH)/pbs-faac-1.28-1.patch
	touch $@
$(FAAC)-$(FAAC_VERSION)/Makefile: $(FAAC)-$(FAAC_VERSION)/mypatched
	cd $(FAAC)-$(FAAC_VERSION)/ && sh ./bootstrap && ./configure --prefix=$(PREFIX) --enable-shared
	touch $@
$(FAAC)-$(FAAC_VERSION)/libfaac/libfaac.la: $(FAAC)-$(FAAC_VERSION)/Makefile
	cd $(FAAC)-$(FAAC_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libfaac.a: $(FAAC)-$(FAAC_VERSION)/libfaac/libfaac.la
	cd $(FAAC)-$(FAAC_VERSION)/ && make install

$(FAAC)-uninstall: $(FAAC)-$(FAAC_VERSION)/libfaac/libfaac.la
	cd $(FAAC)-$(FAAC_VERSION)/ && make uninstall
$(FAAC)-install: $(PREFIX)/lib/libfaac.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(FAAC_SRC)
#FL_DEPENDENCES_FFMPEG+=$(FAAC)-install
FL_UNINSTALL_OTHERS+=$(FAAC)-uninstall

########################################
FDKAAC=fdk-aac
FDKAAC_VERSION=0.1.4
FDKAAC_SRC=$(FDKAAC)-$(FDKAAC_VERSION).tar.gz
FDKAAC_URL=http://sourceforge.net/projects/opencore-amr/files/$(FDKAAC)/$(FDKAAC_SRC)

$(DN_SRC)/$(FDKAAC_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(FDKAAC_URL)
	touch $@
$(FDKAAC)-$(FDKAAC_VERSION)/configure.ac: $(DN_SRC)/$(FDKAAC_SRC)
	tar -xf $(DN_SRC)/$(FDKAAC_SRC)
	touch $@
$(FDKAAC)-$(FDKAAC_VERSION)/configure: $(FDKAAC)-$(FDKAAC_VERSION)/configure.ac
	cd $(FDKAAC)-$(FDKAAC_VERSION)/ && ./autogen.sh
$(FDKAAC)-$(FDKAAC_VERSION)/Makefile: $(FDKAAC)-$(FDKAAC_VERSION)/configure
	cd $(FDKAAC)-$(FDKAAC_VERSION)/ && autoreconf && ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(FDKAAC)-$(FDKAAC_VERSION)/libfdk-aac.la: $(FDKAAC)-$(FDKAAC_VERSION)/Makefile
	cd $(FDKAAC)-$(FDKAAC_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libfdk-aac.a: $(FDKAAC)-$(FDKAAC_VERSION)/libfdk-aac.la
	cd $(FDKAAC)-$(FDKAAC_VERSION)/ && make install

$(FDKAAC)-uninstall: $(FDKAAC)-$(FDKAAC_VERSION)/libfdk-aac.la
	cd $(FDKAAC)-$(FDKAAC_VERSION)/ && make uninstall
$(FDKAAC)-install: $(PREFIX)/lib/libfdk-aac.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(FDKAAC_SRC)
FL_UNINSTALL+=$(FDKAAC)-uninstall

########################################
LAME=lame
LAME_VERSION=3.99.5
LAME_SRC=$(LAME)-$(LAME_VERSION).tar.gz
LAME_URL=http://sourceforge.net/projects/lame/files/lame/3.99/$(LAME_SRC)

$(DN_SRC)/$(LAME_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(LAME_URL)
	touch $@
$(LAME)-$(LAME_VERSION)/configure: $(DN_SRC)/$(LAME_SRC)
	tar -xf $(DN_SRC)/$(LAME_SRC)
	touch $@
$(LAME)-$(LAME_VERSION)/Makefile: $(LAME)-$(LAME_VERSION)/configure
	cd $(LAME)-$(LAME_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(LAME)-$(LAME_VERSION)/libmp3lame/libmp3lame.la: $(LAME)-$(LAME_VERSION)/Makefile
	cd $(LAME)-$(LAME_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libmp3lame.a: $(LAME)-$(LAME_VERSION)/libmp3lame/libmp3lame.la
	cd $(LAME)-$(LAME_VERSION)/ && make install

$(LAME)-uninstall: $(LAME)-$(LAME_VERSION)/libmp3lame/libmp3lame.la
	cd $(LAME)-$(LAME_VERSION)/ && make uninstall
$(LAME)-install: $(PREFIX)/lib/libmp3lame.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(LAME_SRC)
FL_UNINSTALL+=$(LAME)-uninstall

########################################
XVIDCORE=xvidcore
XVIDCORE_VERSION=1.3.2
XVIDCORE_VERSION=1.3.3
XVIDCORE_SRC=$(XVIDCORE)-$(XVIDCORE_VERSION).tar.gz
XVIDCORE_URL=http://downloads.xvid.org/downloads/$(XVIDCORE_SRC)
#XVIDCORE_URL=http://ftp.br.debian.org/debian-multimedia/pool/main/x/xvidcore/xvidcore_1.3.3.orig.tar.gz
#http://downloads.xvid.org/downloads/xvidcore-1.3.3.tar.gz

$(DN_SRC)/$(XVIDCORE_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(XVIDCORE_URL)
	touch $@
$(XVIDCORE)/build/generic/configure: $(DN_SRC)/$(XVIDCORE_SRC)
	tar -xf $(DN_SRC)/$(XVIDCORE_SRC)
	touch $@
$(XVIDCORE)/build/generic/platform.inc: $(XVIDCORE)/build/generic/configure
	cd $(XVIDCORE)/build/generic && CFLAGS="-fPIC" ./configure --prefix=$(PREFIX) # --enable-shared --enable-static
$(PREFIX)/lib/libxvidcore.a: $(XVIDCORE)/build/generic/platform.inc
	cd $(XVIDCORE)/build/generic && make $(MAKE_ARG)
	cd $(XVIDCORE)/build/generic && make install && rm -f $(PREFIX)/lib/libxvidcore.so.*

$(XVIDCORE)-uninstall: $(XVIDCORE)/build/generic/platform.inc
	cd $(LAME)-$(LAME_VERSION)/ && make uninstall
$(XVIDCORE)-install: $(PREFIX)/lib/libxvidcore.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(XVIDCORE_SRC)
FL_UNINSTALL+=$(XVIDCORE)-uninstall

########################################
# use opencore-amr instead
AMRNB=amrnb
AMRNB_VERSION=11.0.0.0
AMRNB_SRC=$(AMRNB)-$(AMRNB_VERSION).tar.bz2
AMRNB_URL=http://www.penguin.cz/~utx/ftp/amr/$(AMRNB_SRC)

$(DN_SRC)/$(AMRNB_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(AMRNB_URL)
	touch $@
$(AMRNB)-$(AMRNB_VERSION)/configure: $(DN_SRC)/$(AMRNB_SRC)
	tar -xf $(DN_SRC)/$(AMRNB_SRC)
	touch $@
$(AMRNB)-$(AMRNB_VERSION)/Makefile: $(AMRNB)-$(AMRNB_VERSION)/configure
	cd $(AMRNB)-$(AMRNB_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-shared
$(AMRNB)-$(AMRNB_VERSION)/libamrnb.la: $(AMRNB)-$(AMRNB_VERSION)/Makefile
	cd $(AMRNB)-$(AMRNB_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libamrnb.a: $(AMRNB)-$(AMRNB_VERSION)/libamrnb.la
	cd $(AMRNB)-$(AMRNB_VERSION)/ && make install

$(AMRNB)-uninstall: $(AMRNB)-$(AMRNB_VERSION)/libamrnb.la
	cd $(AMRNB)-$(AMRNB_VERSION)/ && make uninstall
$(AMRNB)-install: $(PREFIX)/lib/libamrnb.a
	touch $@

FL_SOURCES_OTHERS+=$(DN_SRC)/$(AMRNB_SRC)
#FL_DEPENDENCES_FFMPEG+=$(AMRNB)-install
FL_UNINSTALL+=$(AMRNB)-uninstall

########################################
# use opencore-amr instead
AMRWB=amrwb
AMRWB_VERSION=11.0.0.0
AMRWB_SRC=$(AMRWB)-$(AMRWB_VERSION).tar.bz2
AMRWB_URL=ftp://ftp.penguin.cz/pub/users/utx/amr/$(AMRWB_SRC)

$(DN_SRC)/$(AMRWB_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(AMRWB_URL)
	touch $@
$(AMRWB)-$(AMRWB_VERSION)/configure: $(DN_SRC)/$(AMRWB_SRC)
	tar -xf $(DN_SRC)/$(AMRWB_SRC)
	touch $@
$(AMRWB)-$(AMRWB_VERSION)/Makefile: $(AMRWB)-$(AMRWB_VERSION)/configure
	cd $(AMRWB)-$(AMRWB_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-shared
$(AMRWB)-$(AMRWB_VERSION)/libamrwb.la: $(AMRWB)-$(AMRWB_VERSION)/Makefile
	cd $(AMRWB)-$(AMRWB_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libamrwb.a: $(AMRWB)-$(AMRWB_VERSION)/libamrwb.la
	cd $(AMRWB)-$(AMRWB_VERSION)/ && make install

$(AMRWB)-uninstall: $(AMRWB)-$(AMRWB_VERSION)/libamrwb.la
	cd $(AMRWB)-$(AMRWB_VERSION)/ && make uninstall
$(AMRWB)-install: $(PREFIX)/lib/libamrwb.a
	touch $@

FL_SOURCES_OTHERS+=$(DN_SRC)/$(AMRWB_SRC)
#FL_DEPENDENCES_FFMPEG+=$(AMRWB)-install
FL_UNINSTALL+=$(AMRWB)-uninstall

########################################
OPENCOREAMR=opencore-amr
OPENCOREAMR_VERSION=0.1.3
OPENCOREAMR_SRC=$(OPENCOREAMR)-$(OPENCOREAMR_VERSION).tar.gz
OPENCOREAMR_URL=http://sourceforge.net/projects/opencore-amr/files/opencore-amr/$(OPENCOREAMR_SRC)

$(DN_SRC)/$(OPENCOREAMR_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(OPENCOREAMR_URL)
	touch $@
$(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/configure: $(DN_SRC)/$(OPENCOREAMR_SRC)
	tar -xf $(DN_SRC)/$(OPENCOREAMR_SRC)
	touch $@
$(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/Makefile: $(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/configure
	cd $(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-shared
$(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/amrnb/libopencore-amrnb.la: $(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/Makefile
	cd $(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libopencore-amrnb.a: $(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/amrnb/libopencore-amrnb.la
	cd $(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/ && make install

$(OPENCOREAMR)-uninstall: $(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/amrnb/libopencore-amrnb.la
	cd $(OPENCOREAMR)-$(OPENCOREAMR_VERSION)/ && make uninstall
$(OPENCOREAMR)-install: $(PREFIX)/lib/libopencore-amrnb.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(OPENCOREAMR_SRC)
FL_UNINSTALL+=$(OPENCOREAMR)-uninstall

########################################
# add --disable-opencl to configure args, otherwise ffmpeg will complain 'libx264 not found'
X264=x264
#X264_VERSION=snapshot-20140316-2245
#X264_SRC=$(X264)-$(X264_VERSION).tar.bz2
X264_VERSION=last_stable_x264
X264_SRC=last_x264.tar.bz2
X264_SRC=last_stable_x264.tar.bz2
X264_URL=http://download.videolan.org/pub/videolan/x264/snapshots/$(X264_SRC)

$(DN_SRC)/$(X264_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(X264_URL)
	touch $@
$(X264)-$(X264_VERSION)/x264.h: $(DN_SRC)/$(X264_SRC)
	rm -rf x264-*
	tar -xf $(DN_SRC)/$(X264_SRC)
	mv $(X264)-* $(X264)-$(X264_VERSION)
	touch $@
$(X264)-$(X264_VERSION)/libx264.a: $(X264)-$(X264_VERSION)/x264.h
	#cd $(X264)-$(X264_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-static --enable-shared
	cd $(X264)-$(X264_VERSION)/ && ./configure --prefix=$(PREFIX) --disable-asm --enable-pic --disable-opencl --enable-static --enable-shared
	cd $(X264)-$(X264_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libx264.a: $(X264)-$(X264_VERSION)/libx264.a
	cd $(X264)-$(X264_VERSION)/ && make install

$(X264)-uninstall: $(X264)-$(X264_VERSION)/libx264.a
	cd $(X264)-$(X264_VERSION)/ && make uninstall
$(X264)-install: $(PREFIX)/lib/libx264.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(X264_SRC)
FL_UNINSTALL+=$(X264)-uninstall

########################################
OGG=libogg
OGG_VERSION=1.3.1
OGG_VERSION=1.3.2
OGG_SRC=$(OGG)-$(OGG_VERSION).tar.gz
OGG_URL=http://downloads.xiph.org/releases/ogg/$(OGG_SRC)
$(DN_SRC)/$(OGG_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(OGG_URL)
	touch $@
$(OGG)-$(OGG_VERSION)/configure: $(DN_SRC)/$(OGG_SRC)
	tar -xf $(DN_SRC)/$(OGG_SRC)
	touch $@
$(OGG)-$(OGG_VERSION)/Makefile: $(OGG)-$(OGG_VERSION)/configure
	cd $(OGG)-$(OGG_VERSION)/ && ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(OGG)-$(OGG_VERSION)/src/libogg.la: $(OGG)-$(OGG_VERSION)/Makefile
	cd $(OGG)-$(OGG_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libogg.a: $(OGG)-$(OGG_VERSION)/src/libogg.la
	cd $(OGG)-$(OGG_VERSION)/ && make install

$(OGG)-uninstall: $(OGG)-$(OGG_VERSION)/src/libogg.la
	cd $(OGG)-$(OGG_VERSION)/ && make uninstall
$(OGG)-install: $(PREFIX)/lib/libogg.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(OGG_SRC)
FL_UNINSTALL+=$(OGG)-uninstall

########################################
VORBIS=libvorbis
VORBIS_VERSION=1.3.4
VORBIS_VERSION=1.3.5
VORBIS_SRC=$(VORBIS)-$(VORBIS_VERSION).tar.gz
VORBIS_URL=http://downloads.xiph.org/releases/vorbis/$(VORBIS_SRC)

FL_DEP_VORBIS= \
	$(OGG)-install \
	$(NULL)

$(DN_SRC)/$(VORBIS_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(VORBIS_URL)
	touch $@
$(VORBIS)-$(VORBIS_VERSION)/configure: $(DN_SRC)/$(VORBIS_SRC)
	tar -xf $(DN_SRC)/$(VORBIS_SRC)
	touch $@
$(VORBIS)-$(VORBIS_VERSION)/Makefile: $(VORBIS)-$(VORBIS_VERSION)/configure $(FL_DEP_VORBIS)
	cd $(VORBIS)-$(VORBIS_VERSION)/ && $(ENV_COMPILE) ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(VORBIS)-$(VORBIS_VERSION)/lib/libvorbis.la: $(VORBIS)-$(VORBIS_VERSION)/Makefile
	cd $(VORBIS)-$(VORBIS_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libvorbis.a: $(VORBIS)-$(VORBIS_VERSION)/lib/libvorbis.la
	cd $(VORBIS)-$(VORBIS_VERSION)/ && make install

$(VORBIS)-uninstall: $(VORBIS)-$(VORBIS_VERSION)/lib/libvorbis.la
	cd $(VORBIS)-$(VORBIS_VERSION)/ && make uninstall
$(VORBIS)-install: $(PREFIX)/lib/libvorbis.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(VORBIS_SRC)
FL_UNINSTALL+=$(VORBIS)-uninstall

########################################
THEORA=libtheora
THEORA_VERSION=1.2.0alpha1
THEORA_SRC=$(THEORA)-$(THEORA_VERSION).tar.gz
THEORA_URL=http://downloads.xiph.org/releases/theora/$(THEORA_SRC)

FL_DEP_THEORA= \
	$(OGG)-install \
	$(VORBIS)-install \
	$(NULL)

$(DN_SRC)/$(THEORA_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(THEORA_URL)
	touch $@
$(THEORA)-$(THEORA_VERSION)/configure: $(DN_SRC)/$(THEORA_SRC)
	tar -xf $(DN_SRC)/$(THEORA_SRC)
	touch $@
$(THEORA)-$(THEORA_VERSION)/Makefile: $(THEORA)-$(THEORA_VERSION)/configure $(FL_DEP_THEORA)
	cd $(THEORA)-$(THEORA_VERSION)/ && $(ENV_COMPILE) ./autogen.sh \
		&& $(ENV_COMPILE) ./configure --prefix=$(PREFIX) --enable-static --enable-shared --disable-examples
	touch $@
$(THEORA)-$(THEORA_VERSION)/lib/libtheora.la: $(THEORA)-$(THEORA_VERSION)/Makefile
	cd $(THEORA)-$(THEORA_VERSION)/ && make $(MAKE_ARG)
	touch $@
$(PREFIX)/lib/libtheora.a: $(THEORA)-$(THEORA_VERSION)/lib/libtheora.la
	cd $(THEORA)-$(THEORA_VERSION)/ && make install
	touch $@

$(THEORA)-uninstall: $(THEORA)-$(THEORA_VERSION)/lib/libtheora.la
	cd $(THEORA)-$(THEORA_VERSION)/ && make uninstall
$(THEORA)-install: $(PREFIX)/lib/libtheora.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(THEORA_SRC)
FL_UNINSTALL+=$(THEORA)-uninstall

########################################

# use release files
FFMPEG=ffmpeg

FL_DEPENDENCES_FFMPEG= \
    $(VORBIS)-install  \
    $(THEORA)-install  \
    $(OGG)-install     \
    $(X264)-install    \
    $(OPENCOREAMR)-install \
    $(XVIDCORE)-install \
    $(LAME)-install     \
    $(FDKAAC)-install   \
    $(LIBGSM)-install   \
    $(OPUS)-install     \
    $(LIBSPEEX)-install \
    $(LIBASS)-install   \
    $(BZIP2)-install    \
    $(YASM)-install     \
    $(LIBPNG)-install   \
    $(FREETYPE)-install \
    $(EXPAT)-install    \
    $(LIBXML2)-install  \
    $(FONTCONF)-install \
    $(LVPX)-install     \
    $(NULL)
FL_DEPENDENCES_FFMPEG_OTHERS+=$(FAAD)-install
FL_DEPENDENCES_FFMPEG_OTHERS+=$(LIBA52)-install


USE_GIT_FFMPEG=1

ifeq ($(USE_GIT_FFMPEG),1) # use git instead

FFMPEG_VERSION=git
FFMPEG_SRC=$(FFMPEG)-$(FFMPEG_VERSION)/.git
FFMPEG_URL=git://source.ffmpeg.org/ffmpeg.git

$(DN_SRC)/$(FFMPEG_SRC): $(DN_SRC)/created
	if [ -d "$(DN_SRC)/$(FFMPEG_SRC)" ]; then cd $(DN_SRC)/$(FFMPEG)-$(FFMPEG_VERSION) && git pull; else git clone $(FFMPEG_URL) $(DN_SRC)/$(FFMPEG)-$(FFMPEG_VERSION); fi
	touch $@

$(FFMPEG)-$(FFMPEG_VERSION)/.git: $(DN_SRC)/$(FFMPEG_SRC)
	cd $(DN_SRC)/$(FFMPEG)-$(FFMPEG_VERSION) && git pull
	if [ -d "$(FFMPEG)-$(FFMPEG_VERSION)" ]; then cd $(FFMPEG)-$(FFMPEG_VERSION) && git pull; else git clone $(DN_SRC)/$(FFMPEG)-$(FFMPEG_VERSION)/ $(FFMPEG)-$(FFMPEG_VERSION); fi
	touch $@

$(FFMPEG)-$(FFMPEG_VERSION)/mypatched: $(DN_PATCH)/pbs-ffmpeg-1.patch $(FFMPEG)-$(FFMPEG_VERSION)/.git
	cd $(FFMPEG)-$(FFMPEG_VERSION)/ && git pull
#	cd $(FFMPEG)-$(FFMPEG_VERSION)/ && patch -p1 < $(DN_PATCH)/pbs-ffmpeg-1.patch
	touch $@

else

FFMPEG_VERSION=1.1
FFMPEG_VERSION=2.1.4
FFMPEG_VERSION=2.8.2
FFMPEG_SRC=$(FFMPEG)-$(FFMPEG_VERSION).tar.bz2
FFMPEG_URL=http://ffmpeg.org/releases/$(FFMPEG_SRC)

$(DN_SRC)/$(FFMPEG_SRC): $(DN_SRC)/created
	$(WGET) -O $@ $(FFMPEG_URL)
	touch $@
$(FFMPEG)-$(FFMPEG_VERSION)/README.md: $(DN_SRC)/$(FFMPEG_SRC)
	rm -rf ffmpeg*
	tar -xf $(DN_SRC)/$(FFMPEG_SRC)
	#mv ffmpeg* $(FFMPEG)-$(FFMPEG_VERSION)
	touch $@

$(FFMPEG)-$(FFMPEG_VERSION)/mypatched: $(DN_PATCH)/pbs-ffmpeg-1.patch $(FFMPEG)-$(FFMPEG_VERSION)/README.md
	#cd $(FFMPEG)-$(FFMPEG_VERSION)/ && patch -p1 < $(DN_PATCH)/pbs-ffmpeg-1.patch
	touch $@

endif

$(FFMPEG)-$(FFMPEG_VERSION)/config.mak: $(FFMPEG)-$(FFMPEG_VERSION)/mypatched $(FL_DEPENDENCES_FFMPEG)
# --enable-libxavs --enable-libvo-aacenc --enable-libvo-amrwbenc --enable-libmodplug
# --enable-libbluray --enable-filters
# add: --enable-librtmp --enable-x11grab
#			--enable-static --enable-shared --extra-cflags=--static \
#			--extra-cflags="-I$(PREFIX)/include -static" \
#			--extra-ldflags="-L$(PREFIX)/lib -lfontconfig -lfreetype -lxml2 -lexpat -lpng -lm -static" \
# add: sed -i 's/-L${libdir} -lfontconfig[^l]*$/-L${libdir} -lfontconfig -lfreetype -lxml2 -lpng -lbz2/' $(PREFIX)/lib/pkgconfig/fontconfig.pc
	cd $(FFMPEG)-$(FFMPEG_VERSION)/ \
		&& mkdir -p $(PREFIX)/tmp/ \
		&& export TMPDIR="$(PREFIX)/tmp/" \
		&& $(ENV_COMPILE) CFLAGS="`$(ENV_COMPILE) pkg-config --cflags libass fontconfig fribidi freetype2`" \
			LDFLAGS="`$(ENV_COMPILE) pkg-config --libs --cflags libass fontconfig fribidi freetype2`" \
			./configure --extra-version=$(STRLOGO) \
			--enable-static --enable-shared \
			--extra-cflags="`$(ENV_COMPILE) pkg-config --cflags libass fontconfig fribidi freetype2`" \
			--extra-ldflags="`$(ENV_COMPILE) pkg-config --libs --cflags libass fontconfig fribidi freetype2`" \
			--prefix=$(PREFIX) \
			--enable-version3 --enable-libopencore-amrnb --enable-libopencore-amrwb \
			--enable-libvorbis --enable-libtheora --enable-libmp3lame --enable-libspeex\
			--enable-libxvid --enable-libx264 \
			--enable-gpl --enable-pthreads --enable-nonfree --enable-postproc --enable-libgsm \
			--enable-libfdk-aac --enable-libvpx \
			--enable-libopus --enable-bzlib --enable-zlib \
			--enable-libass --enable-fontconfig --enable-libfreetype \
			--disable-debug --disable-devices \
			--disable-ffserver --disable-ffplay --disable-doc \
			--enable-gray --enable-runtime-cpudetect \
			$(NULL)

$(FFMPEG)-$(FFMPEG_VERSION)/libavcodec/libavcodec.a: $(FFMPEG)-$(FFMPEG_VERSION)/config.mak
	cd $(FFMPEG)-$(FFMPEG_VERSION)/ && $(ENV_COMPILE) make $(MAKE_ARG)
$(PREFIX)/lib/libavcodec.a: $(FFMPEG)-$(FFMPEG_VERSION)/libavcodec/libavcodec.a
	cd $(FFMPEG)-$(FFMPEG_VERSION)/ && $(ENV_COMPILE) make install

$(FFMPEG)-$(FFMPEG_VERSION)/ffmpeg: $(PREFIX)/lib/libavcodec.a
	cd $(FFMPEG)-$(FFMPEG_VERSION)/ && $(ENV_COMPILE) make $(MAKE_ARG)
$(PREFIX)/bin/ffmpeg: $(FFMPEG)-$(FFMPEG_VERSION)/ffmpeg
	cd $(FFMPEG)-$(FFMPEG_VERSION)/ && $(ENV_COMPILE) make install
#	ldd $(PREFIX)/bin/ffmpeg
#	$(PREFIX)/bin/ffmpeg -version

$(FFMPEG)-$(FFMPEG_VERSION)/tools/qt-faststart: $(FFMPEG)-$(FFMPEG_VERSION)/ffmpeg
	cd $(FFMPEG)-$(FFMPEG_VERSION)/tools/ && gcc -D_LARGEFILE_SOURCE qt-faststart.c -o qt-faststart
$(PREFIX)/bin/qt-faststart: $(FFMPEG)-$(FFMPEG_VERSION)/tools/qt-faststart
	cp $(FFMPEG)-$(FFMPEG_VERSION)/tools/qt-faststart $(PREFIX)/bin


$(FFMPEG)-uninstall: $(FFMPEG)-$(FFMPEG_VERSION)/libavcodec/libavcodec.a
	rm -f $(PREFIX)/bin/qt-faststart
	cd $(FFMPEG)-$(FFMPEG_VERSION)/ && $(ENV_COMPILE) make uninstall
$(FFMPEG)-install: $(PREFIX)/lib/libavcodec.a $(PREFIX)/bin/ffmpeg $(PREFIX)/bin/qt-faststart
	touch $@

FL_SOURCES+=$(DN_SRC)/$(FFMPEG_SRC)
#FL_DEPENDENCES_FFMPEG+=$(FFMPEG)-install
FL_UNINSTALL+=$(FFMPEG)-uninstall


########################################
# ilmbase, An high dynamic-range image file format library
ILMBASE=ilmbase
ILMBASE_VERSION=2.2.0
ILMBASE_SRC=$(ILMBASE)-$(ILMBASE_VERSION).tar.gz
ILMBASE_URL=http://download.savannah.nongnu.org/releases/openexr/$(ILMBASE_SRC)

$(DN_SRC)/$(ILMBASE_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(ILMBASE_URL)
	touch $@
$(ILMBASE)-$(ILMBASE_VERSION)/configure: $(DN_SRC)/$(ILMBASE_SRC)
	tar -xf $(DN_SRC)/$(ILMBASE_SRC)
	touch $@
$(ILMBASE)-$(ILMBASE_VERSION)/Makefile: $(ILMBASE)-$(ILMBASE_VERSION)/configure $(FL_DEP_ILMBASE)
	cd $(ILMBASE)-$(ILMBASE_VERSION)/ && $(ENV_COMPILE) ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(ILMBASE)-$(ILMBASE_VERSION)/lib/ilmbase.la: $(ILMBASE)-$(ILMBASE_VERSION)/Makefile
	cd $(ILMBASE)-$(ILMBASE_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/ilmbase.a: $(ILMBASE)-$(ILMBASE_VERSION)/lib/ilmbase.la
	cd $(ILMBASE)-$(ILMBASE_VERSION)/ && make install

$(ILMBASE)-uninstall: $(ILMBASE)-$(ILMBASE_VERSION)/lib/ilmbase.la
	cd $(ILMBASE)-$(ILMBASE_VERSION)/ && make uninstall
$(ILMBASE)-install: $(PREFIX)/lib/ilmbase.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(ILMBASE_SRC)
#FL_DEPENDENCES_FFMPEG+=$(ILMBASE)-install
FL_UNINSTALL+=$(ILMBASE)-uninstall

########################################
# OpenEXR, a high dynamic-range (HDR) image file format
# http://www.openexr.com/
OPENEXR=openexr
OPENEXR_VERSION=2.2.0
OPENEXR_SRC=$(OPENEXR)-$(OPENEXR_VERSION).tar.gz
OPENEXR_URL=http://download.savannah.nongnu.org/releases/openexr/$(OPENEXR_SRC)

FL_DEP_OPENEXR= \
	$(ZLIB)-install \
	$(ILMBASE)-install \
	$(NULL)

# use released files
#$(DN_SRC)/$(OPENEXR_SRC): $(DN_SRC)/created
#	$(WGET) -O $@ -c $(OPENEXR_URL) -O $(DN_SRC)/$(OPENEXR_SRC)
#	touch $@
#$(OPENEXR)-$(OPENEXR_VERSION)/CMakeLists.txt: $(DN_SRC)/$(OPENEXR_SRC)
#	rm -rf OPENEXR*
#	tar -xf $(DN_SRC)/$(OPENEXR_SRC)
#	#mv OPENEXR* $(OPENEXR)-$(OPENEXR_VERSION)
#	touch $@

$(DN_SRC)/$(OPENEXR_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(OPENEXR_URL)
	touch $@
$(OPENEXR)-$(OPENEXR_VERSION)/README: $(DN_SRC)/$(OPENEXR_SRC)
	tar -xf $(DN_SRC)/$(OPENEXR_SRC)
	touch $@
$(OPENEXR)-$(OPENEXR_VERSION)/configure: $(OPENEXR)-$(OPENEXR_VERSION)/README $(FL_DEP_OPENEXR)
$(OPENEXR)-$(OPENEXR_VERSION)/Makefile: $(OPENEXR)-$(OPENEXR_VERSION)/configure
	cd $(OPENEXR)-$(OPENEXR_VERSION)/ && $(ENV_COMPILE) ./configure --prefix=$(PREFIX) --enable-static --enable-shared
$(OPENEXR)-$(OPENEXR_VERSION)/IlmImf/libIlmImf.la: $(OPENEXR)-$(OPENEXR_VERSION)/Makefile
	cd $(OPENEXR)-$(OPENEXR_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libIlmImf.a: $(OPENEXR)-$(OPENEXR_VERSION)/IlmImf/libIlmImf.la
	cd $(OPENEXR)-$(OPENEXR_VERSION)/ && make install

$(OPENEXR)-uninstall: $(OPENEXR)-$(OPENEXR_VERSION)/IlmImf/libIlmImf.la
	cd $(OPENEXR)-$(OPENEXR_VERSION)/ && make uninstall
$(OPENEXR)-install: $(PREFIX)/lib/libIlmImf.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(OPENEXR_SRC)
FL_UNINSTALL+=$(OPENEXR)-uninstall

########################################
# glew, The OpenGL Extension Wrangler Library
# http://glew.sourceforge.net
GLEW=glew
GLEW_VERSION=1.13.0
GLEW_SRC=$(GLEW)-$(GLEW_VERSION).tgz
GLEW_URL=http://sourceforge.net/projects/glew/files/glew/$(GLEW_VERSION)/$(GLEW_SRC)

FL_DEP_GLEW= \
	$(LIBXMU)-install \
	$(LIBXI)-install \
	$(GLU)-install \
	$(NULL)

$(DN_SRC)/$(GLEW_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(GLEW_URL)
	touch $@
$(GLEW)-$(GLEW_VERSION)/Makefile: $(DN_SRC)/$(GLEW_SRC) $(FL_DEP_GLEW)
	tar -xf $(DN_SRC)/$(GLEW_SRC)
	cd $(GLEW)-$(GLEW_VERSION)/ && sed -i 's|lib64|lib|' config/Makefile.linux
	cd $(GLEW)-$(GLEW_VERSION)/ && sed -i '/^.PHONY: .*\.pc$$/d' Makefile
	touch $@
$(GLEW)-$(GLEW_VERSION)/IlmImf/libIlmImf.la: $(GLEW)-$(GLEW_VERSION)/Makefile
	cd $(GLEW)-$(GLEW_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libIlmImf.a: $(GLEW)-$(GLEW_VERSION)/IlmImf/libIlmImf.la
	cd $(GLEW)-$(GLEW_VERSION)/ && make GLEW_DEST=$(PREFIX) install

$(GLEW)-uninstall: $(GLEW)-$(GLEW_VERSION)/IlmImf/libIlmImf.la
	cd $(GLEW)-$(GLEW_VERSION)/ && make uninstall
$(GLEW)-install: $(PREFIX)/lib/libIlmImf.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(GLEW_SRC)
FL_UNINSTALL+=$(GLEW)-uninstall

########################################
# JSONCPP, A C++ library for interacting with JSON
# https://github.com/open-source-parsers/jsoncpp
JSONCPP=jsoncpp
JSONCPP_VERSION=1.6.5
JSONCPP_SRC=$(JSONCPP)-$(JSONCPP_VERSION).tar.gz
JSONCPP_URL=https://github.com/open-source-parsers/jsoncpp/archive/$(JSONCPP_VERSION).tar.gz

FL_DEP_JSONCPP= \
	$(CMAKE)-install \
	$(NULL)

$(DN_SRC)/$(JSONCPP_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(JSONCPP_URL)
	touch $@
$(JSONCPP)-$(JSONCPP_VERSION)/CMakeLists.txt: $(DN_SRC)/$(JSONCPP_SRC)
	tar -xf $(DN_SRC)/$(JSONCPP_SRC)
	touch $@
$(JSONCPP)-$(JSONCPP_VERSION)/Makefile: $(JSONCPP)-$(JSONCPP_VERSION)/CMakeLists.txt $(FL_DEP_JSONCPP)
	cd $(JSONCPP)-$(JSONCPP_VERSION)/ && mkdir -p build && cd build \
		&& $(ENV_COMPILE) cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$(PREFIX) \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_STATIC_LIBS=OFF \
            ..
$(JSONCPP)-$(JSONCPP_VERSION)/build/libjsoncpp.la: $(JSONCPP)-$(JSONCPP_VERSION)/Makefile
	cd $(JSONCPP)-$(JSONCPP_VERSION)/build && make $(MAKE_ARG)
$(PREFIX)/lib/libjsoncpp.so: $(JSONCPP)-$(JSONCPP_VERSION)/build/libjsoncpp.la
	cd $(JSONCPP)-$(JSONCPP_VERSION)/build && make install

$(JSONCPP)-uninstall: $(JSONCPP)-$(JSONCPP_VERSION)/build/libjsoncpp.la
	cd $(JSONCPP)-$(JSONCPP_VERSION)/ && make uninstall
$(JSONCPP)-install: $(PREFIX)/lib/libjsoncpp.so
	touch $@

FL_SOURCES+=$(DN_SRC)/$(JSONCPP_SRC)
FL_UNINSTALL+=$(JSONCPP)-uninstall

########################################
# GL2PS, an OpenGL to PostScript printing library
# http://geuz.org/gl2ps/
GL2PS=gl2ps
GL2PS_VERSION=1.3.9
GL2PS_SRC=$(GL2PS)-$(GL2PS_VERSION).tgz
GL2PS_URL=http://geuz.org/gl2ps/src/$(GL2PS_SRC)

FL_DEP_GL2PS= \
	$(CMAKE)-install \
	$(LIBPNG)-install \
	$(NULL)

$(DN_SRC)/$(GL2PS_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(GL2PS_URL)
	touch $@
$(GL2PS)-$(GL2PS_VERSION)/CMakeLists.txt: $(DN_SRC)/$(GL2PS_SRC)
	tar -xf $(DN_SRC)/$(GL2PS_SRC)
	mv GL2PS* $(GL2PS)-$(GL2PS_VERSION)
	touch $@
$(GL2PS)-$(GL2PS_VERSION)/Makefile: $(GL2PS)-$(GL2PS_VERSION)/CMakeLists.txt $(FL_DEP_GL2PS)
	cd $(GL2PS)-$(GL2PS_VERSION)/ && mkdir -p build && cd build \
		&& $(ENV_COMPILE) cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$(PREFIX) \
            -DCMAKE_EXE_LINKER_FLAGS=-lm \
            ..
$(GL2PS)-$(GL2PS_VERSION)/build/libgl2ps.la: $(GL2PS)-$(GL2PS_VERSION)/Makefile
	cd $(GL2PS)-$(GL2PS_VERSION)/build && make $(MAKE_ARG)
$(PREFIX)/lib/libgl2ps.a: $(GL2PS)-$(GL2PS_VERSION)/build/libgl2ps.la
	cd $(GL2PS)-$(GL2PS_VERSION)/build && make install

$(GL2PS)-uninstall: $(GL2PS)-$(GL2PS_VERSION)/build/libgl2ps.la
	cd $(GL2PS)-$(GL2PS_VERSION)/ && make uninstall
$(GL2PS)-install: $(PREFIX)/lib/libgl2ps.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(GL2PS_SRC)
FL_UNINSTALL+=$(GL2PS)-uninstall


########################################
# General purpose library and file format for storing scientific data
# http://www.hdfgroup.org/HDF5/

HDF5=hdf5
HDF5_VERSION=1.8.16
HDF5_SRC=$(HDF5)-$(HDF5_VERSION).tar.gz
HDF5_URL=ftp://ftp.hdfgroup.org/HDF5/current/src/$(HDF5_SRC)

$(DN_SRC)/$(HDF5_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(HDF5_URL)
	touch $@
$(HDF5)-$(HDF5_VERSION)/configure: $(DN_SRC)/$(HDF5_SRC)
	tar -xf $(DN_SRC)/$(HDF5_SRC)
	touch $@

# --enable-threadsafe
$(HDF5)-$(HDF5_VERSION)/Makefile: $(HDF5)-$(HDF5_VERSION)/configure
	cd $(HDF5)-$(HDF5_VERSION)/ \
    && ./configure --prefix=$(PREFIX) \
        --enable-hl \
        --enable-linux-lfs \
        --enable-production \
        --with-pic \
        --docdir=$(PREFIX)/share/doc/hdf5/ \
        --with-pthread=$(PREFIX)/lib/ \
        --disable-sharedlib-rpath
$(HDF5)-$(HDF5_VERSION)/src/libhdf5.la: $(HDF5)-$(HDF5_VERSION)/Makefile
	cd $(HDF5)-$(HDF5_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libhdf5.a: $(HDF5)-$(HDF5_VERSION)/src/libhdf5.la
	cd $(HDF5)-$(HDF5_VERSION)/ && make install

$(HDF5)-uninstall: $(HDF5)-$(HDF5_VERSION)/src/libhdf5.la
	cd $(HDF5)-$(HDF5_VERSION)/ && make uninstall
$(HDF5)-install: $(PREFIX)/lib/libhdf5.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(HDF5_SRC)
FL_UNINSTALL+=$(HDF5)-uninstall

########################################
# gdal: A translator library for raster geospatial data formats
# http://www.gdal.org/
GDAL=gdal
GDAL_VERSION=2.0.1
GDAL_SRC=$(GDAL)-$(GDAL_VERSION).tar.gz
GDAL_URL=http://download.osgeo.org/gdal/$(GDAL_VERSION)/$(GDAL_SRC)

FL_DEP_GDAL= \
	$(HDF5)-install \
	$(LIBPNG)-install \
	$(LIBTIFF)-install \
	#$(sqlite)-install \
	$(postgresql-libs)-install \
	$(poppler)-install \
	$(netcdf)-install \
	$(libspatialite)-install \
	$(libmariadbclient)-install \
	$(libgeotiff)-install \
	$(giflib)-install \
	$(geos)-install \
	$(curl)-install \
	$(cfitsio)-install \
	$(NULL)

$(DN_SRC)/$(GDAL_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(GDAL_URL)
	touch $@
$(GDAL)-$(GDAL_VERSION)/configure: $(DN_SRC)/$(GDAL_SRC)
	tar -xf $(DN_SRC)/$(GDAL_SRC)
	touch $@

#       --with-netcdf \
        --with-sqlite3 \
        --with-geotiff \
        --with-mysql \
        --with-python \
        --with-curl \
        --with-perl \
        --with-geos \
        --with-poppler \
        --with-spatialite
$(GDAL)-$(GDAL_VERSION)/Makefile: $(GDAL)-$(GDAL_VERSION)/configure $(FL_DEP_GDAL)
	cd $(GDAL)-$(GDAL_VERSION)/ \
        && ./configure --prefix=$(PREFIX) --enable-static --disable-shared \
        --with-hdf5 \
        --with-libtiff \
        --with-png \
        $(NULL)

$(GDAL)-$(GDAL_VERSION)/libgdal.la: $(GDAL)-$(GDAL_VERSION)/Makefile
	cd $(GDAL)-$(GDAL_VERSION)/ && make $(MAKE_ARG)
$(PREFIX)/lib/libgdal.a: $(GDAL)-$(GDAL_VERSION)/libgdal.la
	cd $(GDAL)-$(GDAL_VERSION)/ && make install

$(GDAL)-uninstall: $(GDAL)-$(GDAL_VERSION)/libgdal.la
	cd $(GDAL)-$(GDAL_VERSION)/ && make uninstall
$(GDAL)-install: $(PREFIX)/lib/libgdal.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(GDAL_SRC)
FL_UNINSTALL+=$(GDAL)-uninstall

########################################
# The Visualization Toolkit (VTK) is an open-source C++ library for 3D computer graphics, image processing, and visualization
# http://www.vtk.org/
VTK=VTK
VTK_VERSION=6.3.0
VTK_SRC=$(VTK)-$(VTK_VERSION).tar.gz
VTK_URL=http://www.vtk.org/files/release/6.3/$(VTK_SRC)

FL_DEP_VTK= \
	$(CMAKE)-install \
	$(FFMPEG)-install \
	$(GL2PS)-install \
	$(EXPAT)-install \
	$(FREETYPE)-install \
	$(LIBJPEG)-install \
	$(LIBPNG)-install \
	$(LIBTIFF)-install \
	$(ZLIB)-install \
	$(THEORA)-install \
	$(JSONCPP)-install \
	$(GLEW)-install \
	$(GDAL)-install \
	#$(LIBXML2)-install \
	$(HDF5)-install \
	$(TWISTED)-install \
	$(ZOPE)-install \
	$(SIX)-install \
	$(AUTOBAHN)-install \
	$(MPI4PY)-install \
	$(NULL)

$(DN_SRC)/$(VTK)Data-$(VTK_VERSION).tar.gz: $(DN_SRC)/created
	$(WGET) -O $@ -c http://www.vtk.org/files/release/6.3/$(VTK)Data-$(VTK_VERSION).tar.gz
	touch $@

$(DN_SRC)/$(VTK)LargeData-$(VTK_VERSION).tar.gz: $(DN_SRC)/created
	$(WGET) -O $@ -c http://www.vtk.org/files/release/6.3/$(VTK)LargeData-$(VTK_VERSION).tar.gz
	touch $@

$(DN_SRC)/$(VTK_SRC): $(DN_SRC)/created $(DN_SRC)/$(VTK)Data-$(VTK_VERSION).tar.gz #$(DN_SRC)/$(VTK)LargeData-$(VTK_VERSION).tar.gz
	$(WGET) -O $@ -c $(VTK_URL)
	touch $@

$(VTK)-$(VTK_VERSION)/CMakeLists.txt: $(DN_SRC)/$(VTK_SRC)
	tar -xf $(DN_SRC)/$(VTK_SRC)
	#mv VTK* $(VTK)-$(VTK_VERSION)
	touch $@

#            -DVTK_QT_VERSION:STRING="5" \
            -DVTK_WRAP_JAVA:BOOL=ON \
            -DVTK_WRAP_PYTHON:BOOL=ON \
            -DVTK_WRAP_TCL:BOOL=ON \
            -DBUILD_DOCUMENTATION:BOOL=ON \
            -DDOCUMENTATION_HTML_HELP:BOOL=ON \
            -DDOCUMENTATION_HTML_TARZ:BOOL=ON \
            -DBUILD_EXAMPLES:BOOL=ON \
            -DVTK_USE_SYSTEM_TWISTED:BOOL=ON \
            -DVTK_USE_SYSTEM_ZOPE:BOOL=ON \
            -DVTK_USE_SYSTEM_SIX:BOOL=ON \
            -DVTK_USE_SYSTEM_AUTOBAHN:BOOL=ON \
            -DVTK_USE_SYSTEM_MPI4PY:BOOL=ON \
            -DVTK_USE_SYSTEM_HDF5:BOOL=ON \
            -DVTK_USE_SYSTEM_LIBXML2:BOOL=ON \

$(VTK)-$(VTK_VERSION)/build/Makefile: $(VTK)-$(VTK_VERSION)/CMakeLists.txt $(FL_DEP_VTK)
	cd $(VTK)-$(VTK_VERSION)/ && mkdir -p build && cd build \
		&& $(ENV_COMPILE) cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$(PREFIX) \
            -Wno-dev \
            -DPYTHON_EXECUTABLE:FILEPATH="`which python2`" \
            -DCMAKE_SKIP_RPATH=ON \
            -DBUILD_SHARED_LIBS:BOOL=ON \
            -DVTK_USE_FFMPEG_ENCODER:BOOL=ON \
            -DVTK_BUILD_ALL_MODULES:BOOL=ON \
            -DVTK_USE_LARGE_DATA:BOOL=ON \
            -DCMAKE_CXX_FLAGS="-D__STDC_CONSTANT_MACROS" \
            -DVTK_CUSTOM_LIBRARY_SUFFIX="" \
            -DVTK_INSTALL_INCLUDE_DIR:PATH=include/vtk \
            -DVTK_USE_SYSTEM_EXPAT:BOOL=ON \
            -DVTK_USE_SYSTEM_FREETYPE:BOOL=ON \
            -DVTK_USE_SYSTEM_JPEG:BOOL=ON \
            -DVTK_USE_SYSTEM_PNG:BOOL=ON \
            -DVTK_USE_SYSTEM_TIFF:BOOL=ON \
            -DVTK_USE_SYSTEM_ZLIB:BOOL=ON \
            -DVTK_USE_SYSTEM_OGGTHEORA:BOOL=ON \
            -DVTK_USE_SYSTEM_GL2PS:BOOL=ON \
            -DVTK_USE_SYSTEM_GLEW:BOOL=ON \
            -DVTK_USE_SYSTEM_JSONCPP:BOOL=ON \
            ..
$(VTK)-$(VTK_VERSION)/build/lib/libvtksys.so: $(VTK)-$(VTK_VERSION)/build/Makefile
	cd $(VTK)-$(VTK_VERSION)/build && make $(MAKE_ARG)
$(PREFIX)/lib/libvtksys.so: $(VTK)-$(VTK_VERSION)/build/lib/libvtksys.so
	cd $(VTK)-$(VTK_VERSION)/build && make install

$(VTK)-uninstall: $(VTK)-$(VTK_VERSION)/build/libvtk.la
	cd $(VTK)-$(VTK_VERSION)/ && make uninstall
$(VTK)-install: $(PREFIX)/lib/libvtksys.so
	touch $@

FL_SOURCES+=$(DN_SRC)/$(VTK_SRC)
FL_UNINSTALL+=$(VTK)-uninstall

########################################
# xine-lib
# intel-tbb
# gtkglext

# libcl
# eigen2
# mesa
# python2-numpy

########################################
# CUDA: NVIDIA's GPU proprietary programming toolkit
# ref: https://wiki.archlinux.org/index.php/GPGPU
# OpenCV 2.3.1 supports only CUDA 4.0.
# OpenCV 2.4 supports CUDA 4.1 and 4.2.

# https://aur.archlinux.org/packages/cu/cuda3.1-sdk/PKGBUILD
CUDASDK31=cuda3
CUDASDK31_VERSION=3.1
CUDASDK31_VERSION_CONN=3_1
CUDASDK31_SRC=gpucomputingsdk_$(CUDASDK31_VERSION)_linux.run
CUDASDK31_URL=http://developer.download.nvidia.com/compute/cuda/$(CUDASDK31_VERSION_CONN)/sdk/$(CUDASDK31_SRC)
$(DN_SRC)/$(CUDASDK31_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(CUDASDK31_URL)
	touch $@
$(CUDASDK)-$(CUDASDK31_VERSION)/pkg: $(DN_SRC)/$(CUDASDK31_SRC)
	@echo "Extracting CUDA SDK ..."
	mkdir -p $(CUDASDK)-$(CUDASDK31_VERSION) \
		&& cd $(CUDASDK)-$(CUDASDK31_VERSION) \
		&& sh $(DN_SRC)/$(CUDASDK31_SRC) --noexec --keep \
        && cd pkg/sdk/C/common \
        && sed -i "s|/usr/local/cuda|$(PREFIX)/opt/$(CUDASDK31)|g" common.mk \
        && make
	touch $@
$(CUDASDK31)-uninstall: $(CUDASDK31)-$(CUDASDK31_VERSION)/pkg
	rm -rf  "$(PREFIX)/opt/$(CUDASDK31)/"
$(CUDASDK31)-install: $(CUDASDK31)-$(CUDASDK31_VERSION)/pkg $(FL_DEP_CUDASDK31)
	cd $(CUDASDK31)-$(CUDASDK31_VERSION)/ \
		&& mkdir -p $(PREFIX)/opt/$(CUDASDK31)/ \
		&& for i in pkg/sdk/* ; do \
              cp "$i" "$(PREFIX)/opt/$(CUDASDK31)/" \
           done

# https://projects.archlinux.org/svntogit/community.git/tree/trunk/PKGBUILD?h=packages/cuda
# http://developer.download.nvidia.com/compute/cuda/7_0/Prod/local_installers/cuda_7.0.28_linux.run
CUDASDK=cuda7
CUDASDK_VERSION=7.0.28
CUDASDK_VERSION_CONN=7_0
CUDASDK_SRC=cuda_$(CUDASDK_VERSION)_linux.run
CUDASDK_URL=http://developer.download.nvidia.com/compute/cuda/$(CUDASDK_VERSION_CONN)/Prod/local_installers/$(CUDASDK_SRC)
# extracted SRC: cuda_7.0.28_linux.run --extract=extracted/
#   NVIDIA-Linux-x86_64-346.46.run -- NVIDIA Accelerated Graphics Driver for Linux-x86_64
#   cuda-linux64-rel-7.0.28-19326674.run -noprompt -prefix=$(pwd)/target
#   cuda-samples-linux-7.0.28-19326674.run

$(DN_SRC)/$(CUDASDK_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(CUDASDK_URL)
	touch $@
$(CUDASDK)-$(CUDASDK_VERSION)/pkg: $(DN_SRC)/$(CUDASDK_SRC)
	@echo "Extracting CUDA SDK ..."
	mkdir -p $(CUDASDK)-$(CUDASDK_VERSION)/extracted/ \
		&& sh $(DN_SRC)/$(CUDASDK_SRC) --extract=$(shell pwd)/$(CUDASDK)-$(CUDASDK_VERSION)/extracted/  \
		&& cd $(CUDASDK)-$(CUDASDK_VERSION)/ \
		&& sh extracted/cuda-linux64-rel-*.run --noexec --keep \
		&& sh extracted/cuda-samples-linux-*.run --noexec --keep \
		&& sh extracted/NVIDIA-Linux-*.run --keep -x -a \
		&& rm -rf nvdrv && ls | grep NVIDIA-Linux | while read A; do echo move $$A ...; mv $$A nvdrv ; done \
        && sed  -e "s|/usr/share|$(PREFIX)/usr/share|g" \
                -e 's|can_add_for_all_users;|1;|g' \
                -e 's|=\\"$$prefix\\\"|=/opt/$(CUDASDK)|g' -e 's|Terminal=No|Terminal=false|g' -e 's|ParallelComputing|ParallelComputing;|g' \
                -i pkg/install-linux.pl \
		&& sed 's|\$$cudaprefix\\|\\/opt\\/$(CUDASDK)\\|g' -i pkg/install-sdk-linux.pl \
        && find pkg -name '*.py' | xargs sed -i -e 's|env python|env python2|g' -e 's|bin/python|bin/python2|g'
	touch $@

$(CUDASDK)-uninstall: $(CUDASDK)-$(CUDASDK_VERSION)/pkg
	rm -rf  "$(PREFIX)/opt/$(CUDASDK)/"
$(CUDASDK)-install: $(CUDASDK)-$(CUDASDK_VERSION)/pkg $(FL_DEP_CUDASDK)
	cd $(CUDASDK)-$(CUDASDK_VERSION)/pkg \
		&& perl install-linux.pl -prefix="$(PREFIX)/opt/$(CUDASDK)" -noprompt \
		&& perl install-sdk-linux.pl -cudaprefix="$(PREFIX)/opt/$(CUDASDK)" -prefix="$(PREFIX)/opt/$(CUDASDK)/samples" -noprompt \
		&& sed -i "/unsupported GNU/d" $(PREFIX)/opt/$(CUDASDK)/include/host_config.h \
		&& cd .. \
		&& cd nvdrv && cp lib* $(PREFIX)/opt/$(CUDASDK)/lib64/ \
		&& ls | grep libcuda.so. | while read A; do (cd $(PREFIX)/opt/$(CUDASDK)/lib64/; ln -s $$A libcuda.so; ln -s $$A libcuda.so.1; cd $(PREFIX)/lib; ln -s ../opt/$(CUDASDK)/lib64/$$A libcuda.so; ln -s ../opt/$(CUDASDK)/lib64/$$A libcuda.so.1) ; done \
		&& ls | grep libnvcuvid.so. | while read A; do (cd $(PREFIX)/opt/$(CUDASDK)/lib64/; ln -s $$A libnvcuvid.so; ln -s $$A libnvcuvid.so.1; cd $(PREFIX)/lib; ln -s ../opt/$(CUDASDK)/lib64/$$A libnvcuvid.so; ln -s ../opt/$(CUDASDK)/lib64/$$A libnvcuvid.so.1) ; done
	touch $@

FL_SOURCES+=$(DN_SRC)/$(CUDASDK_SRC)
#FL_DEPENDENCES_FFMPEG+=$(CUDASDK)-install
FL_UNINSTALL+=$(CUDASDK)-uninstall

########################################
# IPPICV
IPPICV_SRC_BASE=linux-8b449a536a2157bcad08a2b9f266828b/ippicv_linux_20141027.tgz
ifdef SystemRoot
   # windows
   IPPICV_SRC_BASE=windows-b59f865d1ba16e8c84124e19d78eec57/ippicv_windows_20141027.zip
else
   ifeq ($(shell uname), Linux)
      # linux
      IPPICV_SRC_BASE=linux-8b449a536a2157bcad08a2b9f266828b/ippicv_linux_20141027.tgz
   else
      # MAC?
      IPPICV_SRC_BASE=macosx-9662fe0694a67e59491a0dcc82fa26e0/ippicv_macosx_20141027.tgz
   endif
endif
IPPICV_SRC=$(notdir $(IPPICV_SRC_BASE))

$(DN_SRC)/$(IPPICV_SRC):
	wget -O $@ -c http://sourceforge.net/projects/opencvlibrary/files/3rdparty/ippicv/$(IPPICV_SRC)

########################################
# refer: https://aur.archlinux.org/packages/op/opencv-cuda-all/PKGBUILD
# https://aur.archlinux.org/packages/op/opencv-cuda-qt/PKGBUILD
# https://projects.archlinux.org/svntogit/packages.git/tree/trunk/PKGBUILD?h=packages/opencv

OPENCV=opencv
OPENCV_VERSION=2.4.8
OPENCV_VERSION=2.4.11
OPENCV_VERSION=2.4.10
OPENCV_VERSION=2.4.9
OPENCV_VERSION=3.0.0
OPENCV_SRC=$(OPENCV)-$(OPENCV_VERSION).tar.gz
OPENCV_URL=https://github.com/Itseez/opencv/archive/$(OPENCV_VERSION).tar.gz
#http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.4.8/opencv-2.4.8.zip

FL_DEP_OPENCV= \
	$(ZLIB)-install \
	$(LIBPNG)-install \
	$(LIBDC1394)-install \
	$(XVIDCORE)-install \
	$(CMAKE)-install \
	$(PREFIX)/lib/libfaac.a \
	$(FFMPEG)-install \
	$(OPENEXR)-install \
	$(VTK)-install \
	$(OPENCV_GPU_SUPPORT_DEPEND) \
	$(NULL)


# options for gpu/cuda
# -D WITH_QT=ON -D WITH_CUDA=ON -D CUDA_ARCH_BIN=1.1 -D CUDA_ARCH_PTX=1.1 -D WITH_CUBLAS=ON -D WITH_NVCUVID=ON -D CUDA_FAST_MATH=ON
# if nvidia card is old and has only 1:1 Compute Cappability


USE_GIT_FFMPEG=1

ifeq ($(USE_GIT_FFMPEG),1) # use git instead
OPENCV_VERSION=git
OPENCV_SRC=$(OPENCV)-$(OPENCV_VERSION)/.git
OPENCV_URL=https://github.com/Itseez/opencv.git

$(DN_SRC)/$(OPENCV_SRC): $(DN_SRC)/created
	if [ -d "$(DN_SRC)/$(OPENCV_SRC)" ]; then cd $(DN_SRC)/$(OPENCV)-$(OPENCV_VERSION) && git pull; else git clone $(OPENCV_URL) $(DN_SRC)/$(OPENCV)-$(OPENCV_VERSION); fi
	touch $@

$(OPENCV)-$(OPENCV_VERSION)/.git: $(DN_SRC)/$(OPENCV_SRC)
	cd $(DN_SRC)/$(OPENCV)-$(OPENCV_VERSION) && git pull
	if [ -d "$(OPENCV)-$(OPENCV_VERSION)" ]; then cd $(OPENCV)-$(OPENCV_VERSION) && git pull; else git clone $(DN_SRC)/$(OPENCV)-$(OPENCV_VERSION)/ $(OPENCV)-$(OPENCV_VERSION); fi

$(OPENCV)-$(OPENCV_VERSION)/README.md: $(OPENCV)-$(OPENCV_VERSION)/.git $(FL_DEP_OPENCV)
	cd $(OPENCV)-$(OPENCV_VERSION)/ && git pull
	touch $@

$(OPENCV)-$(OPENCV_VERSION)/CMakeLists.txt: $(OPENCV)-$(OPENCV_VERSION)/README.md

else # use released files
$(DN_SRC)/$(OPENCV_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(OPENCV_URL) -O $(DN_SRC)/$(OPENCV_SRC)
	touch $@
$(OPENCV)-$(OPENCV_VERSION)/CMakeLists.txt: $(DN_SRC)/$(OPENCV_SRC)
	rm -rf opencv*
	tar -xf $(DN_SRC)/$(OPENCV_SRC)
	#mv opencv* $(OPENCV)-$(OPENCV_VERSION)
	touch $@

endif


$(OPENCV)-$(OPENCV_VERSION)/3rdparty/ippicv/downloads/$(IPPICV_SRC_BASE): $(DN_SRC)/$(IPPICV_SRC) $(OPENCV)-$(OPENCV_VERSION)/CMakeLists.txt
	mkdir -p $(dir $@)
	cp $(DN_SRC)/$(IPPICV_SRC) $@

$(OPENCV)-$(OPENCV_VERSION)/build/Makefile: $(OPENCV)-$(OPENCV_VERSION)/CMakeLists.txt $(OPENCV)-$(OPENCV_VERSION)/3rdparty/ippicv/downloads/$(IPPICV_SRC_BASE)
	cd $(OPENCV)-$(OPENCV_VERSION)/ && mkdir -p build && cd build \
		&& $(ENV_COMPILE) cmake \
			-D CMAKE_BUILD_TYPE=RELEASE \
			-D CMAKE_INSTALL_PREFIX=$(PREFIX) \
			-D CMAKE_SKIP_RPATH=ON \
			$(CMAKE_ARCH_FLAGS) \
			-D CMAKE_VERBOSE_MAKEFILE=ON -D CMAKE_VERBOSE=ON \
			-D BUILD_opencv_python=OFF -D WITH_QT=OFF \
			-D BUILD_opencv_java=OFF -D BUILD_FAT_JAVA_LIB=OFF \
			-D BUILD_opencv_nonfree=ON \
			-D BUILD_opencv_superres=ON \
			-D BUILD_EXAMPLES=ON \
			-D INSTALL_C_EXAMPLES=ON \
			-D BUILD_opencv_apps=OFF -D BUILD_ANDROID_EXAMPLES=OFF \
			-D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF \
			-D BUILD_ZLIB=ON \
			-D BUILD_PNG=ON \
			-D BUILD_TIFF=ON \
			-D BUILD_JASPER=ON \
			-D BUILD_JPEG=ON \
			-D BUILD_OPENEXR=ON \
			-D BUILD_SHARED_LIBS=ON \
			-D BUILD_WITH_DEBUG_INFO=OFF \
			$(OPENCV_GPU_SUPPORT_CMAKE) \
			-D WITH_OPENCL=ON \
			-D WITH_OPENGL=ON \
			-D WITH_TBB=ON \
			-D WITH_1394=ON \
			-D WITH_FFMPEG=ON -D FFMPEG_INCLUDE_DIR=$(PREFIX)/include -D FFMPEG_LIB_DIR=$(PREFIX)/lib \
			-D CMAKE_EXE_LINKER_FLAGS="-L$(PREFIX)/lib -lmp3lame -lvorbis -lfaac -lx264 -lxvidcore -lfreetype" \
			-D CMAKE_EXE_LINKER_FLAGS_RELEASE="-L$(PREFIX)/lib -lmp3lame -lvorbis -lfaac -lx264 -lxvidcore -lfreetype" \
			-D CMAKE_SHARED_LINKER_FLAGS="-L$(PREFIX)/lib -lmp3lame -lvorbis -lfaac -lx264 -lxvidcore -lfreetype" \
			.. \
			$(NULL)
# -D BZIP2_LIBRARIES=$(PREFIX)/lib/libbz2.a

$(OPENCV)-$(OPENCV_VERSION)/build/lib/libopencv_core.a: $(OPENCV)-$(OPENCV_VERSION)/build/Makefile
	cd $(OPENCV)-$(OPENCV_VERSION)/build && $(ENV_COMPILE) make $(MAKE_ARG) VERBOSE=1
$(PREFIX)/lib/libopencv_core.a: $(OPENCV)-$(OPENCV_VERSION)/build/lib/libopencv_core.a
	cd $(OPENCV)-$(OPENCV_VERSION)/build && make install
	#cp $(OPENCV)-$(OPENCV_VERSION)/3rdparty/lib/*.a $(PREFIX)/lib

$(OPENCV)-uninstall: $(OPENCV)-$(OPENCV_VERSION)/build/lib/libopencv_core.a
	cd $(OPENCV)-$(OPENCV_VERSION)/build && make uninstall
$(OPENCV)-install: $(PREFIX)/lib/libopencv_core.a
	touch $@

FL_SOURCES+=$(DN_SRC)/$(OPENCV_SRC)
FL_UNINSTALL+=$(OPENCV)-uninstall

########################################
MEDIAMETRICS=mediametrics

FL_DEP_MEDIAMETRICS=$(OPENCV)-install

####################
MEDIAMETRICS_VERSION=0.2.0
MEDIAMETRICS_SRC=$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION).tar.gz
MEDIAMETRICS_URL=https://github.com/yhfudev/mediametrics/archive/$(MEDIAMETRICS_SRC)

FL_SOURCES+=$(DN_SRC)/$(MEDIAMETRICS_SRC)

$(DN_SRC)/$(MEDIAMETRICS_SRC): $(DN_SRC)/created
	$(WGET) -O $@ -c $(MEDIAMETRICS_URL)
	touch $@
$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure.ac: $(DN_SRC)/$(MEDIAMETRICS_SRC)
	tar -xf $(DN_SRC)/$(MEDIAMETRICS_SRC)
	touch $@
#$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure: $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure.ac $(FL_DEP_MEDIAMETRICS)
#	cd $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/ && ./autogen.sh
#$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/Makefile: $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure $(FL_DEP_MEDIAMETRICS)
#	cd $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/ && $(ENV_COMPILE) LDFLAGS=-L$(PREFIX)/lib ./configure --prefix=$(PREFIX)

####################
MEDIAMETRICS_VERSION=git
MEDIAMETRICS_SRC=$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure.ac
MEDIAMETRICS_URL=https://github.com/yhfudev/mediametrics.git

FL_SOURCES+=$(DN_SRC)/$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure.ac

$(DN_SRC)/$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure.ac: $(DN_SRC)/created
	git clone $(MEDIAMETRICS_URL) $(DN_SRC)/$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)
	touch $@
$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure.ac: $(DN_SRC)/$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure.ac
	cd $(DN_SRC)/$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/ && git pull
#	rm -rf $(DN_TOP)/$(MEDIAMETRICS)*
#	cp -r $(DN_SRC)/$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION) $(DN_TOP)/
	if [ -d "$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)" ]; then cd $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION) && git pull; else git clone $(DN_SRC)/$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION) $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION); fi
	touch $@
$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure: $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure.ac $(FL_DEP_MEDIAMETRICS)
	cd $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/ && ./autogen.sh
$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/Makefile: $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/configure
	cd $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/ && $(ENV_COMPILE) LDFLAGS=-L$(PREFIX)/lib ./configure --prefix=$(PREFIX) $(MEDIAMETRICS_GPU_SUPPORT_CONF)
####################

$(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/mediametrics: $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/Makefile
	cd $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/ && $(ENV_COMPILE) make $(MAKE_ARG)
$(PREFIX)/bin/mediametrics: $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/mediametrics
	cd $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/ && $(ENV_COMPILE) make install

$(MEDIAMETRICS)-uninstall: $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/mediametrics
	cd $(MEDIAMETRICS)-$(MEDIAMETRICS_VERSION)/ && $(ENV_COMPILE) make uninstall
$(MEDIAMETRICS)-install: $(PREFIX)/bin/mediametrics
	touch $@

#FL_DEPENDENCES_FFMPEG+=$(MEDIAMETRICS)-install
FL_UNINSTALL+=$(MEDIAMETRICS)-uninstall

########################################
GPAC=gpac
#GPAC_VERSION=0.5.0
#GPAC_SRC=$(GPAC)-v$(GPAC_VERSION).tar.gz
#GPAC_URL=http://sourceforge.net/projects/gpac/files/GPAC/GPAC%200.5.0/$(GPAC_SRC)

GPAC_VERSION=svn
GPAC_SRC=$(GPAC)-$(GPAC_VERSION)/gpac/configure
GPAC_URL=svn://svn.code.sf.net/p/gpac/code/trunk

FL_DEP_GPAC= \
	$(FREETYPE)-install \
	$(XVIDCORE)-install \
	$(THEORA)-install \
	$(VORBIS)-install \
	$(OGG)-install \
	$(LIBPNG)-install \
	$(ZLIB)-install \
	$(CMAKE)-install \
	$(FFMPEG)-install \
	$(NULL)

$(DN_SRC)/$(GPAC)-$(GPAC_VERSION)/gpac/configure: $(DN_SRC)/created
	svn checkout $(GPAC_URL) $(DN_SRC)/$(GPAC)-$(GPAC_VERSION)
	touch $@
$(GPAC)-$(GPAC_VERSION)/gpac/configure: $(DN_SRC)/$(GPAC)-$(GPAC_VERSION)/gpac/configure
#	cd $(DN_SRC)/$(GPAC)-$(GPAC_VERSION)/ && svn update
	rm -rf $(DN_TOP)/$(GPAC)*
	cp -r $(DN_SRC)/$(GPAC)-$(GPAC_VERSION) $(DN_TOP)/
#	@find $(DN_TOP)/$(GPAC)-$(GPAC_VERSION) -name ".svn" | while read A ; do rm -rf "$$A"; done
	touch $@
$(GPAC)-$(GPAC_VERSION)/mypatched: $(DN_PATCH)/pbs-gpac-svn-1.patch $(GPAC)-$(GPAC_VERSION)/gpac/configure
	cd $(GPAC)-$(GPAC_VERSION)/ && svn revert -R .
	cd $(GPAC)-$(GPAC_VERSION)/ && patch -p0 < $(DN_PATCH)/pbs-gpac-svn-1.patch
	touch $@
#SpiderMonkey --use-js=no,local
# --disable-ttxt
# --use-jpeg=no,local
# --use-faad=no,local
# --use-mad=no,local
# --use-ffmpeg=no,local
# --use-openjpeg=no,system,local
# --use-a52=no,system,local
# -lfaac -lx264
$(GPAC)-$(GPAC_VERSION)/gpac/Makefile: $(GPAC)-$(GPAC_VERSION)/mypatched $(FL_DEP_GPAC)
	cd $(GPAC)-$(GPAC_VERSION)/gpac/ \
		&& $(ENV_COMPILE) ./configure --prefix=$(PREFIX) \
		--extra-cflags="-I$(PREFIX)/include" \
		--extra-ldflags="-L$(PREFIX)/lib -lxvidcore -ltheora -lvorbis -logg -lfreetype -lpng -lz" \
		--use-zlib=system \
		--use-png=local \
		--use-ft=local \
		--use-ogg=system --use-vorbis=system --use-theora=system \
		--use-ffmpeg=no --use-xvid=local \
		--static-modules --enable-static-bin --static-mp4box \
		--enable-player \
		$(NULL)
$(GPAC)-$(GPAC_VERSION)/gpac/bin/gcc/MP4Box: $(GPAC)-$(GPAC_VERSION)/gpac/Makefile
	cd $(GPAC)-$(GPAC_VERSION)/gpac/ && make $(MAKE_ARG)
$(PREFIX)/bin/MP4Box: $(GPAC)-$(GPAC_VERSION)/gpac/bin/gcc/MP4Box
	cd $(GPAC)-$(GPAC_VERSION)/gpac/ && make install

$(GPAC)-uninstall: $(GPAC)-$(GPAC_VERSION)/gpac/bin/gcc/MP4Box
	cd $(GPAC)-$(GPAC_VERSION)/gpac/ && make uninstall
$(GPAC)-install: $(PREFIX)/bin/MP4Box
	touch $@

FL_SOURCES+=$(DN_SRC)/$(GPAC)-$(GPAC_VERSION)/gpac/configure
#FL_DEPENDENCES_FFMPEG+=$(GPAC)-install
FL_UNINSTALL+=$(GPAC)-uninstall

########################################

get-sources: $(DN_SRC)/created $(FL_SOURCES) $(FL_SOURCES_OTHERS)

ffmpeg: $(FFMPEG)-install

opencv: $(OPENCV)-install

mediametrics: $(MEDIAMETRICS)-install

gpac: $(GPAC)-install

uninstall: $(FL_UNINSTALL)

clean:
	@rm -rf target $(FL_DEPENDENCES_FFMPEG) $(FL_DEP_GPAC) $(FL_DEP_MEDIAMETRICS) $(FL_DEP_OPENCV)

distclean: clean
	@mkdir -p target/
	@touch i_should_be_removed
	@(echo "nullname" && ls) | grep -v run.sh | grep -v target | grep -v Makefile | grep -v distclean | grep -v sources | grep -v .patch | xargs sh -c 'mv "$$@" target'
	@rm -rf target
